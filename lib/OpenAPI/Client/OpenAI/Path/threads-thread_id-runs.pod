=encoding utf8

=head1 NAME

OpenAPI::Client::OpenAI::Path::threads-thread_id-runs - Documentation for the /threads/{thread_id}/runs path.

=head1 DESCRIPTION

This document describes the API endpoint at C</threads/{thread_id}/runs>.

See the C<examples/> directory in the distribution for examples of how to use this.

=head2 C<GET /threads/{thread_id}/runs>

Returns a list of runs belonging to a thread.

=head3 Operation ID

C<listRuns>

    $client->listRuns( ... );

=head3 Parameters

=over 4

=item * C<thread_id> (in path) (Required) - The ID of the thread the run belongs to.
Type: C<string>

=item * C<limit> (in query) (Optional) - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.

Type: C<integer>

Default: C<20>

=item * C<order> (in query) (Optional) - Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.

Type: C<string>

Possible values: C<asc desc>

Default: C<desc>

=item * C<after> (in query) (Optional) - A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.

Type: C<string>

=item * C<before> (in query) (Optional) - A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.

Type: C<string>


=back


=head3 Responses

=head3 Status Code: C<200>

OK

Content Types:

=over 4

=item * C<application/json>

Example:

    {
       "data" : [
          {
             "required_action" : {
                "submit_tool_outputs" : {
                   "tool_calls" : [
                      {
                         "function" : null
                      }
                   ]
                }
             },
             "usage" : null,
             "last_error" : null,
             "incomplete_details" : null,
             "tools" : [
                null
             ]
          }
       ],
       "object" : "list",
       "first_id" : "run_abc123",
       "last_id" : "run_abc456",
       "has_more" : false
    }



=back

=head2 C<POST /threads/{thread_id}/runs>

Create a run.

=head3 Operation ID

C<createRun>

    $client->createRun( ... );

=head3 Parameters

=over 4

=item * C<thread_id> (in path) (Required) - The ID of the thread to run.
Type: C<string>

=item * C<include[]> (in query) (Optional) - A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.

See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.

Type: C<array>


=back


=head3 Request Body

=head3 Content Type: C<application/json>


=head3 Example:

    {
       "temperature" : 1,
       "model" : "gpt-4o",
       "additional_messages" : [
          {
             "attachments" : [
                {
                   "tools" : [
                      null
                   ]
                }
             ]
          }
       ],
       "top_p" : 1,
       "tools" : [
          null
       ]
    }



=head3 Responses

=head3 Status Code: C<200>

OK

Content Types:

=over 4

=item * C<application/json>

Example:

    {
       "incomplete_details" : null,
       "tools" : [
          null
       ],
       "usage" : null,
       "required_action" : {
          "submit_tool_outputs" : {
             "tool_calls" : [
                {
                   "function" : null
                }
             ]
          }
       },
       "last_error" : null
    }



=back


=head1 SEE ALSO

L<OpenAPI::Client::OpenAI::Path>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2023-2025 by Nelson Ferraz

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.14.0 or,
at your option, any later version of Perl 5 you may have available.

=cut
